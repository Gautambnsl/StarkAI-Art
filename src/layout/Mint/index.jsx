import { useState } from 'react';
import axios from 'axios';
import { Button, Modal, ModalBody, ModalHeader, Spinner } from 'reactstrap';
import { useUserWallets } from '@dynamic-labs/sdk-react-core';
import contract_class from '../../connector/abi';
import { Contract } from 'starknet';

const Mint = () => {
  const [modal, setModal] = useState(false);
  const [loading, setLoading] = useState(false);
  const [phase, setPhase] = useState('');
  const [image, setImage] = useState('');
  const [ipfs, setIpfs] = useState('');

  const user = useUserWallets();

  const handlePhaseInput = (event) => {
    setPhase(event.target.value);
  };

  const toggle = () => setModal(!modal);

  const handleMinting = async () => {
    if (phase.trim() === '') {
      alert('Please enter a prompt before minting.');
      return;
    }

    setModal(true);
    setLoading(false);

    const options = {
      method: 'POST',
      url: 'https://chatgpt-42.p.rapidapi.com/texttoimage',
      headers: {
        'x-rapidapi-key': '39735b2314msh1e8c532bd060158p157221jsn418de8433bcb',
        'x-rapidapi-host': 'chatgpt-42.p.rapidapi.com',
        'Content-Type': 'application/json',
      },
      data: {
        text: phase,
        width: 512,
        height: 512,
      },
    };

    try {
      const response = await axios.request(options);
      if (response?.status === 200) {
        setImage(response?.data?.generated_image);
        setLoading(true);
      }
    } catch (error) {
      console.error(error);
    }
  };

  const handleMintingNFT = async () => {
    const json = {
      name: 'StarkAI',
      description: 'Image generated by StarkAI',
      image: image,
    };

    try {
      const url = 'https://api.pinata.cloud/pinning/pinJSONToIPFS';
      const response = await axios.post(url, json, {
        headers: {
          pinata_api_key: '411dd1142b5de31e2450',
          pinata_secret_api_key:
            '9508b26f3e6902440bd53fb664ea3cdaaf4db4f40d88cef3cd76105bd240c9d7',
          'Content-Type': 'application/json',
        },
      });

      if (response?.status === 200) {
        setIpfs(response?.data?.IpfsHash);
      }
    } catch (error) {
      console.error('Error uploading to Pinata:', error);
    }
  };

  const demo = async () => {
    console.log('user', user);
    const provider = await user?.[0]?.connector?.getWeb3Provider();
    console.log('provider', provider);

    const testAddress =
      '0x0157788b28c473a46b65886e379c4c605766c7d60dc037047d56b4ce8a5e3d56';

    const myTestContract = new Contract(
      contract_class.abi,
      testAddress,
      provider
    );
    console.log('myTestContract', myTestContract);

    myTestContract.connect(provider);

    const bal1 = await myTestContract?.name();

    console.log('Initial balance =', bal1);

    // const demo = await myTestContract?.safe_mint(
    //   '0x04490472774117D2A161282611e3Ab5B41DF018693623AE0FB4C71577a23A148',
    //   0,
    //   'xyz'
    // );
    // console.log('demo', demo)

    const myCall = myTestContract.populate('safe_mint', [
      '0x04490472774117D2A161282611e3Ab5B41DF018693623AE0FB4C71577a23A148',
      0,
      'xyz',
    ]);
    console.log('myCall', myCall);
    const res = await myTestContract.safe_mint(myCall?.calldata);
    console.log('res', res);
    await provider.waitForTransaction(res.transaction_hash);
  };

  demo();

  // const contract = async () => {
  //   const connection = await connect({ modalMode: 'neverAsk' });
  //   console.log('connection', connection);

  //   const testAddress =
  //     '0x0157788b28c473a46b65886e379c4c605766c7d60dc037047d56b4ce8a5e3d56';

  //   const myTestContract = new Contract(
  //     contract_class.abi,
  //     testAddress,
  //     connection?.wallet
  //   );

  //   console.log('myTestContract', myTestContract);

  //   myTestContract.connect(connection?.wallet);

  //   const bal1 = await myTestContract?.name();

  //   console.log('Initial balance =', bal1);
  // };

  // useEffect(() => {
  //   if (account?.connector) {
  //     contract();
  //   }
  // }, [account?.connector]);
  return (
    <>
      <div className="mintParent" id="mint">
        <p className="mintTitle">Mint Your First</p>
        <p className="mintTitleBold">AI Generated NFTs</p>
        <div className="mintButtonParent">
          <input
            className="mintInput"
            placeholder="Enter your prompt"
            onChange={handlePhaseInput}
            value={phase}
          />
          <button
            className="buttonMint"
            style={{ cursor: 'pointer' }}
            onClick={handleMinting}
          >
            Mint Now
          </button>
          {/* {account?.connectors.map((connector) => (
            <button
              className="buttonMint"
              style={{ cursor: 'pointer' }}
              onClick={() => account?.connect({ connector })}
            >
              Connect Now
            </button>
          ))} */}
        </div>
        <div className="mintFooter">
          <img
            className="logo"
            src="https://github.com/Gautambnsl/aiverse-nft/blob/main/final-frontend/src/assets/images/logo.png?raw=true"
            alt="Logo"
          />
          <div className="maintFooterTextParent">
            <p className="mintFooterText">Shaping the</p>
            <p className="mintFooterText">AI Industry </p>
          </div>
          <div className="mintFooterLinkParent">
            <div className="mintFooterInternalLink">
              <a className="internalLink" onClick={() => passData('about')}>
                About Us
              </a>
              <a className="internalLink" onClick={() => passData('mint')}>
                Contact
              </a>
              <a className="internalLink" onClick={() => passData('home')}>
                Home
              </a>
            </div>
          </div>
        </div>
        <div className="mintFooterMobile">
          <img
            className="logoMobile"
            src="https://github.com/Gautambnsl/aiverse-nft/blob/main/final-frontend/src/assets/images/logo.png?raw=true"
            alt="Logo Mobile"
          />
          <div className="maintFooterTextParentMobile">
            <p className="mintFooterTextMobile">Shaping the</p>
            <p className="mintFooterTextMobile">AI Industry </p>
          </div>
        </div>
        <div className="mintFooterLinkParentMobile">
          <div className="mintFooterInternalLink">
            <a className="internalLink" onClick={() => passData('about')}>
              About Us
            </a>
            <a className="internalLink" onClick={() => passData('mint')}>
              Contact
            </a>
            <a className="internalLink" onClick={() => passData('home')}>
              Home
            </a>
          </div>
        </div>
      </div>
      <Modal isOpen={modal} toggle={toggle} centered>
        <ModalHeader toggle={toggle}>
          {loading ? 'Your NFT is ready' : 'Wait your NFT is being loading'}
        </ModalHeader>
        <ModalBody>
          <div
            style={{
              minHeight: '5rem',
              justifyContent: 'center',
              display: 'flex',
              alignItems: 'center',
            }}
          >
            {loading ? (
              <div
                style={{
                  display: 'flex',
                  flexDirection: 'column',
                  gap: '20px',
                }}
              >
                <img
                  src={image}
                  alt={phase}
                  loading="lazy"
                  width={400}
                  height={400}
                />
                <Button color="primary" onClick={handleMintingNFT}>
                  Mint this NFT
                </Button>
              </div>
            ) : (
              <Spinner color="dark" type="grow" />
            )}
          </div>
        </ModalBody>
      </Modal>
    </>
  );
};

export default Mint;
